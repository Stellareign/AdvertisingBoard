@Configuration
@EnableWebSecurity
public class WebSecurityConfig {
    private static final String[] AUTH_WHITELIST = {
            "/swagger-resources/**",
            "/swagger-ui.html",
            "/v3/api-docs",
            "/webjars/**",
            "/login",
            "/register",
//
    };

/**
Конфигурация для фильтра цепочки безопасности (SecurityFilterChain) в Spring Security.
Он определяет правила доступа для различных URL-адресов и HTTP-методов.
 */

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf()
                .disable()
                .authorizeHttpRequests(
                        (authorization) ->
                                authorization
                                        .mvcMatchers(AUTH_WHITELIST)
                                        .permitAll()
                                        .mvcMatchers(HttpMethod.GET, "/ads","/comments", "/image")
                                        .permitAll()
                                        .mvcMatchers("/ads/**", "/users/**", "/comments/**")
                                        .authenticated()
                )
                .cors()
                .and()
                .sessionManagement(configurer -> configurer.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .httpBasic(withDefaults());
        return http.build();
    }
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
//******************************************************
ИСХОДНИК
@Configuration
public class WebSecurityConfig {

    private static final String[] AUTH_WHITELIST = {
            "/swagger-resources/**",
            "/swagger-ui.html",
            "/v3/api-docs",
            "/webjars/**",
            "/login",
            "/register"
    };

    @Bean
    public InMemoryUserDetailsManager userDetailsService(PasswordEncoder passwordEncoder) {
        UserDetails user =
                User.builder()
                        .username("user@gmail.com")
                        .password("password")
                        .passwordEncoder(passwordEncoder::encode)
                        .roles(Role.USER.name())
                        .build();
        return new InMemoryUserDetailsManager(user);
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf()
                .disable()
                .authorizeHttpRequests(
                        authorization ->
                                authorization
                                        .mvcMatchers(AUTH_WHITELIST)
                                        .permitAll()
                                        .mvcMatchers("/ads/**", "/users/**")
                                        .authenticated())
                .cors()
                .and()
                .httpBasic(withDefaults());
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
//**************************************************************************************************************
@Service
@RequiredArgsConstructor
public class SecurityService {
    private final AdsRepository adsRepository;
    private final CommentRepository commentRepository;
    public boolean canDeleteComment(int commentId, int adId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if (authentication.getAuthorities().stream().anyMatch(a -> a.getAuthority().equals("ADMIN"))) {
            return true;
        }
        Comment comment = checkForAdAndComment(adId, commentId);
        String name = comment.getAuthor().getUsername();

        return authentication.getName().equals(name);
    }
    public boolean moderateAdd(int id) {

        Optional<AdEntity> adEntity = Optional.ofNullable(adsRepository.findById(id)).orElseThrow(() ->
                new NotFoundException("Объявление "+ id + " не найдено ")
        );
        String name = adEntity.get().getAuthor().getUsername();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if (authentication.getAuthorities().stream().anyMatch(a -> a.getAuthority().equals("ADMIN"))) {
            System.out.println(authentication.getAuthorities());
            return true;
        }
        return authentication.getName().equals(name);
    }

    private Comment checkForAdAndComment(int adId, int commentId) {
        adsRepository.findById(adId).orElseThrow(() -> new NotFoundException(
                "Объявление " + adId + " не найдено.")
        );

        return commentRepository.findCommentByPkAndAds_pk(commentId, adId)
                .orElseThrow(() ->
                        new NotFoundException("Комментарий " + commentId +" не найден для объявления " + adId)

                );
    }
}

}
